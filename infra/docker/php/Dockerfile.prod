# Frontend build stage
FROM node:18-bookworm-slim AS frontend-build

WORKDIR /app

# Copy package files
COPY backend/package.json backend/package-lock.json ./
RUN npm ci

# Copy frontend source files
COPY backend/resources/ ./resources/
COPY backend/vite.config.js ./
COPY backend/postcss.config.js ./
COPY backend/tailwind.config.js ./

# Build frontend assets
RUN npm run build

# PHP runtime stage
FROM php:8.4-fpm-bookworm AS base

RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        git curl unzip libzip-dev libpng-dev libonig-dev libxml2-dev \
    && docker-php-ext-configure zip \
    && docker-php-ext-install -j$(nproc) pdo_mysql mbstring exif pcntl bcmath opcache zip \
    && rm -rf /var/lib/apt/lists/*

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html

# Install PHP deps (no dev) with better layer caching
# 1) Copy only composer files first to leverage Docker layer cache
COPY backend/composer.json backend/composer.lock /var/www/html/
# Install vendor deps without running composer scripts (artisan not yet present)
RUN composer install --no-interaction --prefer-dist --no-dev --no-scripts --optimize-autoloader \
    && rm -rf vendor/*/.git

# 2) Copy application source
COPY backend/ /var/www/html/

# 3) Copy built frontend assets from frontend-build stage
COPY --from=frontend-build /app/public/build /var/www/html/public/build

# Refresh autoload after copying source (still avoid composer scripts)
RUN composer dump-autoload --no-interaction --optimize --no-dev --no-scripts

# 4) Ensure writable paths exist with proper ownership/permissions
RUN mkdir -p storage/logs \
    && mkdir -p storage/framework/sessions storage/framework/views storage/framework/cache/data \
    && mkdir -p bootstrap/cache \
    && chown -R www-data:www-data storage bootstrap/cache public/build \
    && chmod -R 775 storage bootstrap/cache \
    && chmod -R 755 public/build

# You can optionally cache configs/routes if APP_KEY is available at runtime
# RUN php artisan config:cache && php artisan route:cache || true

USER www-data

CMD ["php-fpm"]
